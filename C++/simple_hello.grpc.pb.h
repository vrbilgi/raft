// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: simple_hello.proto
#ifndef GRPC_simple_5fhello_2eproto__INCLUDED
#define GRPC_simple_5fhello_2eproto__INCLUDED

#include "simple_hello.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace simple {

class RequestService final {
 public:
  static constexpr char const* service_full_name() {
    return "simple.RequestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status rService(::grpc::ClientContext* context, const ::simple::Request& request, ::simple::Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>> AsyncrService(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>>(AsyncrServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>> PrepareAsyncrService(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>>(PrepareAsyncrServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::simple::HealthCheckResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::simple::HealthCheckResponse>> Watch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::simple::HealthCheckResponse>>(WatchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>> AsyncWatch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>>(AsyncWatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>>(PrepareAsyncWatchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void rService(::grpc::ClientContext* context, const ::simple::Request* request, ::simple::Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rService(::grpc::ClientContext* context, const ::simple::Request* request, ::simple::Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Watch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::grpc::ClientReadReactor< ::simple::HealthCheckResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>* AsyncrServiceRaw(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simple::Response>* PrepareAsyncrServiceRaw(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::simple::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::simple::HealthCheckResponse>* WatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>* AsyncWatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::simple::HealthCheckResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status rService(::grpc::ClientContext* context, const ::simple::Request& request, ::simple::Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::Response>> AsyncrService(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::Response>>(AsyncrServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::Response>> PrepareAsyncrService(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::Response>>(PrepareAsyncrServiceRaw(context, request, cq));
    }
    ::grpc::Status Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::simple::HealthCheckResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>> AsyncCheck(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>>(AsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>> PrepareAsyncCheck(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>>(PrepareAsyncCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::simple::HealthCheckResponse>> Watch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::simple::HealthCheckResponse>>(WatchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>> AsyncWatch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>>(AsyncWatchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>> PrepareAsyncWatch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>>(PrepareAsyncWatchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void rService(::grpc::ClientContext* context, const ::simple::Request* request, ::simple::Response* response, std::function<void(::grpc::Status)>) override;
      void rService(::grpc::ClientContext* context, const ::simple::Request* request, ::simple::Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response, std::function<void(::grpc::Status)>) override;
      void Check(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Watch(::grpc::ClientContext* context, const ::simple::HealthCheckRequest* request, ::grpc::ClientReadReactor< ::simple::HealthCheckResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::simple::Response>* AsyncrServiceRaw(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simple::Response>* PrepareAsyncrServiceRaw(::grpc::ClientContext* context, const ::simple::Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>* AsyncCheckRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::simple::HealthCheckResponse>* PrepareAsyncCheckRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::simple::HealthCheckResponse>* WatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request) override;
    ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>* AsyncWatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::simple::HealthCheckResponse>* PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::simple::HealthCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_rService_;
    const ::grpc::internal::RpcMethod rpcmethod_Check_;
    const ::grpc::internal::RpcMethod rpcmethod_Watch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status rService(::grpc::ServerContext* context, const ::simple::Request* request, ::simple::Response* response);
    virtual ::grpc::Status Check(::grpc::ServerContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response);
    virtual ::grpc::Status Watch(::grpc::ServerContext* context, const ::simple::HealthCheckRequest* request, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrService(::grpc::ServerContext* context, ::simple::Request* request, ::grpc::ServerAsyncResponseWriter< ::simple::Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Check() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::simple::HealthCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::simple::HealthCheckResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Watch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::simple::HealthCheckRequest* request, ::grpc::ServerAsyncWriter< ::simple::HealthCheckResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_rService<WithAsyncMethod_Check<WithAsyncMethod_Watch<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rService() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::simple::Request, ::simple::Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simple::Request* request, ::simple::Response* response) { return this->rService(context, request, response); }));}
    void SetMessageAllocatorFor_rService(
        ::grpc::MessageAllocator< ::simple::Request, ::simple::Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simple::Request, ::simple::Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rService(
      ::grpc::CallbackServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Check() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simple::HealthCheckRequest* request, ::simple::HealthCheckResponse* response) { return this->Check(context, request, response); }));}
    void SetMessageAllocatorFor_Check(
        ::grpc::MessageAllocator< ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Watch() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::simple::HealthCheckRequest* request) { return this->Watch(context, request); }));
    }
    ~WithCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::simple::HealthCheckResponse>* Watch(
      ::grpc::CallbackServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_rService<WithCallbackMethod_Check<WithCallbackMethod_Watch<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Check() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Watch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Check() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Watch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rService() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rService(context, request, response); }));
    }
    ~WithRawCallbackMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Check() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Check(context, request, response); }));
    }
    ~WithRawCallbackMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Check(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Watch() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Watch(context, request); }));
    }
    ~WithRawCallbackMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Watch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simple::Request, ::simple::Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simple::Request, ::simple::Response>* streamer) {
                       return this->StreamedrService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rService(::grpc::ServerContext* /*context*/, const ::simple::Request* /*request*/, ::simple::Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simple::Request,::simple::Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Check : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Check() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>* streamer) {
                       return this->StreamedCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Check() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Check(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::simple::HealthCheckResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::simple::HealthCheckRequest,::simple::HealthCheckResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_rService<WithStreamedUnaryMethod_Check<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Watch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Watch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::simple::HealthCheckRequest, ::simple::HealthCheckResponse>* streamer) {
                       return this->StreamedWatch(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Watch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Watch(::grpc::ServerContext* /*context*/, const ::simple::HealthCheckRequest* /*request*/, ::grpc::ServerWriter< ::simple::HealthCheckResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::simple::HealthCheckRequest,::simple::HealthCheckResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Watch<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_rService<WithStreamedUnaryMethod_Check<WithSplitStreamingMethod_Watch<Service > > > StreamedService;
};

}  // namespace simple


#endif  // GRPC_simple_5fhello_2eproto__INCLUDED
